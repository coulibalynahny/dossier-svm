L
L[[1]]
individu=c("Ana","Celia","Eric","Eve","Paul","Jean","Adan","Louis","Jules","Leo")
sexe=c("F","F","G","F","G","G","G","G","G","G")
ZEP=c("O","O","O","O","N","O","N","O","O","O")
poids=c(16,14,13.5,15.4,16.5,16,17,14.8,17,16.7)
an=c(3,3,3,4,3,4,3,3,4,3)
mois=c(5,10,5,0,8,0,11,9,1,3)
taille=c(100.0,97.0,95.5,101.0,100.0,98.5,103.0,98.0,101.5,100.0)
t(data.frame(individu, sexe, ZEP, poids, an, mois, taille))
data.frame(individu, sexe, ZEP, poids, an, mois, taille))
help(data.frame)
q()
help(rnorm
help(rnorm)
help(rnorm)
v1=rnorm(20,70,sqrt(10)) #n le nb de realisations moyenne 70 sqrt(10)
v1
v2=rnorm(20,25,sqrt(4))
v2
help(rnorm)
#a) Simulez un 3è vecteur, v3, contenant 20 réalisations d'une loi uniforme sur l'intervalle [0;5] puis transformez v3 pour qu'il contienne des valeurs entières :
help(runif)
v3=runif(20,0,5)
v3
v3=round(v3) #pour transformer en partie entière
v3
#b) Créez un tableau de données contenant les 3 vecteurs dans 3 colonnes, et nommez-les "poids", "age", et "douleur" respectivement :
donnees=data.frame(poids=v1, age=v2, douleur=v3)
donnees
is.data.frame(donnees) #Pour vérifier si donnees est bien un dataframe
names(donnees) #Pour voir le nom des varaibles
attach(donnees) #Pour accéder au variables par leur nom
poids
Y=cbind(v1,v2,v3)
Y
Taille=c(Tf,Th) # c : pour concatener 2 vecteurs de taille différente cbind matrices
Taille
Poids=c(Pf,Ph)
Poids
Sexe=c(rep("F",312),rep("H",257))
Sexe
data=(data.frame(Taille, Poids, Sexe))
data
names(data)
attach(data) #pour acceder aux variables par les noms
Th=rnorm(257,175,sqrt(7))
Th
Tf=rnorm(312,165,sqrt(6))
Tf
Ph=rnorm(257,75,sqrt(4))
Ph
Pf=rnorm(312,60,sqrt(2))
Pf
#####Question 2 :
Taille=c(Tf,Th) # c : pour concatener 2 vecteurs de taille différente cbind matrices
Taille
Poids=c(Pf,Ph)
Poids
Sexe=c(rep("F",312),rep("H",257))
Sexe
data=(data.frame(Taille, Poids, Sexe))
data
names(data)
attach(data) #pour acceder aux variables par les noms
tapply(Poids,Sexe,summary)
salaire=read.table("C:/Users/Teodora Todirca/Desktop/r/salaire.txt")#importer la base salaire
salaire #onpeut changer le repertoire et on met./le nom de mon repertoire/nom fichier
names(salaire)
head(salaire) #voir les 6 premières observations
tail(salaire) #voir les 6 dernières observations
is.data.frame(salaire) #Pour vérifier si on a un dataframe
attach(salaire)
q()
| Tables |  | Are           | cool |
:--------.  |:---------:    |-----:|
| col 1 is  |  left-aligned |$1600 |
| col 2 is  |     centered  |  $12 |
| col 3 is  |right-aligned  |    $1|
| Tables |  | Are           | cool |
|:------.|  |:---------:    |-----:|
| col 1 is  |  left-aligned |$1600 |
| col 2 is  |     centered  |  $12 |
| col 3 is  |right-aligned  |    $1|
library(shiny)
library(shiny)
install.packages("rmarkdown")
install.packages("rmarkdown")
library(shiny)
library(shiny)
install.packages("rmarkdown")
library(shiny)
library(MASS)
library(MASS)
Jussac=read.table('Jussac.data.txt')
Jussac=read.table('Jussac.data.txt',header=true)
library(MASS)
Jussac=read.table('Jussac.data.txt',header=TRUE)
Jussac.learn=data.frame(Jussac[-43,])
summary(Jussac)
attach(Jussac)
Z=rep("Chien",42)
Z[Jussac.learn[ ,1]=="Loup"]="Loup"
Jussac.learn[ ,1]=as.factor(Z)
Type.lda <- lda(Type~., data=Jussac.learn)
Ld1 <- Type.lda$scaling[ ,1] #vecteur 1
install.packages(shiny)
library(shiny)
runExample("01_hello")
install.packages(shiny)
library(shiny)
runExample("01_hello")
install.packages(shiny)
library(shiny)
runExample("01_hello")
install.packages(shiny)
install.packages("shiny")
library(shiny)
runExample("01_hello")
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
runApp('C:/Users/pierr/Desktop/nouvelles technologies sous r/chapitre2 shiny/chapitre2')
shiny::runApp('C:/Users/pierr/Desktop/svm/dossier-svm')
library(plotly)
runApp('C:/Users/pierr/Desktop/svm/dossier-svm')
shiny::runApp()
library(plotly)
runApp()
library(plotly)
shiny::runApp()
runApp()
library(plotly)
shiny::runApp()
library(plotly)
shiny::runApp()
library(plotly)
shiny::runApp()
library(plotly)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(plotly)
runApp()
<<<<<<< HEAD
=======
runApp()
runApp('dossier-svm')
runApp('dossier-svm')
runApp()
runApp('dossier-svm')
runApp('C:/Users/nahny/Desktop/docs bur/master ESA/master 2 ESA/SVM/dossier-svm')
DT=read.csv("C:/Users/nahny/Documents/GitHub/creditcard.csv", stringsAsFactors = FALSE )
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
intrain=createDataPartition(DT$Class, p = 0.8,list=FALSE)
DT.train=as.data.frame(DT[intrain,])
data.test=as.data.frame(DT[-intrain,])
runApp('C:/Users/nahny/Desktop/docs bur/master ESA/master 2 ESA/SVM/dossier-svm')
inTrain <- createDataPartition(DT.smote$Class, p = 0.7,list=FALSE)
data.train <-  DT.smote[inTrain,]
data.test <-  DT.smote[-inTrain,]
table(DT.smote$Class)
DT.smote=smotefamily::SMOTE(DT[,-31], DT[,31], K = 4, dup_size = 90)$data
names(DT.smote)[31]="Class"
s=sample(1:nrow(DT.smote),90)
DT.smote=DT.smote[s,]
inTrain <- createDataPartition(DT.smote$Class, p = 0.7,list=FALSE)
data.train <-  DT.smote[inTrain,]
data.test <-  DT.smote[-inTrain,]
table(DT.smote$Class)
train.task <-makeClassifTask(data=data.test,target="Class",positive = "Fraud")
test.task <-makeClassifTask(data=data.test,target="Class",positive = "Fraud")
learner.lg <- makeLearner(cl="classif.logreg",predict.type="prob")
train.lg <- mlr::train(learner.lg,train.task)
pred.lg <-predict(train.lg,test.task)
calculateROCMeasures(pred.lg)
re=calculateROCMeasures(pred.lg)
View(re)
View(re)
re[["measures"]]
list= as.data.frame( re[["measures"]])
dim(list)
list
runApp('C:/Users/nahny/Desktop/docs bur/master ESA/master 2 ESA/SVM/dossier-svm')
runApp('C:/Users/nahny/Desktop/docs bur/master ESA/master 2 ESA/SVM/dossier-svm')
DT::datatable(re)
DT::datatable(re)
re=as.data.frame(calculateROCMeasures(pred.lg))
DT::datatable(list)
mat=as.data.frame(re[["confusion.matrix"]])
DT::datatable(mat)
ud", "fraud", "fraud", "non fraud", "non fraud", "non fraud","error","error","error"))
true <- factor(c("fraud", "non fraud","error", "fraud", "non fraud","error","fraud", "non fraud","error"))
b=cmd[,2]
a=cmd[,1]
c=cmd[,3]
Y =c(a,b,c)
dim(df)
df <- data.frame(predicted, true, Y)
predicted <- factor(c("fraud", "fraud", "fraud", "non fraud", "non fraud", "non fraud","error","error","error"))
true <- factor(c("fraud", "non fraud","error", "fraud", "non fraud","error","fraud", "non fraud","error"))
b=cmd[,2]
a=cmd[,1]
c=cmd[,3]
Y =c(a,b,c)
cm=calculateConfusionMatrix(pred.lg,relative = TRUE)
cmd=as.data.frame(cm[["relative.col"]])
DT::datatable(cmd)
learner.tree <- makeLearner(cl="classif.rpart",predict.type="prob")
train.tree <- mlr::train(learner.tree,train.task)
rpart.plot(getLearnerModel(train.tree),roundint = F)
pred.tree=predict(train.tree,test.task)
tcm=calculateConfusionMatrix(pred.tree,relative = TRUE)
cmd1=data.frame(tcm[["relative.col"]])
DT::datatable(cmd1)
tcm[["relative.col"]]
cm=calculateConfusionMatrix(pred.lg,relative = TRUE)
re=calculateROCMeasures(pred.lg)
DT::datatable(print(re,abbreviations = TRUE))
DT::datatable(print(re,abbreviations = TRUE))
DT::datatable((re,abbreviations = TRUE))
r=print(re,abbreviations = TRUE)
DT::datatable(print(re,abbreviations = TRUE))
DT::datatable(re)
############box ^plot
rdesc=makeResampleDesc("CV", iters = input$k, stratify = TRUE)
############box ^plot
rdesc=makeResampleDesc("CV", iters = 4, stratify = TRUE)
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms, models = TRUE)
############box ^plot
rdesc=makeResampleDesc("CV", iters = 3, stratify = TRUE)
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms, models = TRUE)
############box ^plot
rdesc=makeResampleDesc("CV", iters = 7, stratify = TRUE)
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms, models = TRUE)
rdesc=makeResampleDesc("CV", iters =3, stratify = TRUE)
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms)
models = TRUE
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms, models = TRUE)
df.bmr <- generateThreshVsPerfData(bmr,measures = list(fpr, tpr, ppv, tnr,mmce))
set.seed(123234)
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud
data.train <-data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = input$kn,
dup_size = input$prop)$data
names(data.train)[31]="Class"
s=sample(1:nrow(data.train),input$size)
data.train=data.train[s,]
data.train <-data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = input$kn,
dup_size = input$prop)$data
DT=read.csv("C:/Users/nahny/Documents/GitHub/creditcard.csv", stringsAsFactors = FALSE )
set.seed(123234)
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
data.train <-data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = 4,
dup_size = 90)$data
data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = 4,
dup_size = 90)$data
names(data.train)[31]="Class"
s=sample(1:nrow(data.train),input$size)
data.train=data.train[s,]
s=sample(1:nrow(data.train),input$size)
s=sample(1:nrow(data.train),8000)
data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = 4,
dup_size = 90)$data
names(data.train)[31]="Class"
s=sample(1:nrow(data.train),8000)
data.train=data.train[s,]
############box ^plot
rdesc=makeResampleDesc("CV", iters =3, stratify = TRUE)
ms = list(mlr::auc, mmce)
lrns = list(makeLearner("classif.svm", predict.type = "prob"),
makeLearner("classif.rpart", predict.type = "prob"),
makeLearner("classif.randomForest", predict.type = "prob"),
makeLearner("classif.logreg", predict.type = "prob"))
bmr = benchmark(lrns, train.task, rdesc, measures = ms, models = TRUE)
>>>>>>> 4910840cef09955ee013c081cf9ca9cd02e98221
shiny::runApp()
install.packages("shiny")
install.packages("mlr")
install.packages("rpart")
install.packages("rpart.plot")
install.packages("e1071")
install.packages("caret")
install.packages("smotefamily")
install.packages("FSelectorRcpp")
install.packages("randomForest")
install.packages("data.table")
install.packages("dt")
install.packages("ggplot2")
install.packages("plotly")
library(shiny)
library(mlr)
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)
library(smotefamily)
library(FSelectorRcpp)
library(randomForest)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
runApp()
install.packages("installr")
library(install)
ibrary(installr)
library(installr)
updateR()
updateR()
sessionInfo()
install.packages("ggplot")
install.packages("ggplot2")
library(ggplot)
library(ggplot2)
install.packages("profvis")
library(profvis)
p <- profvis({
library(shiny)
library(mlr)
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)
library(smotefamily)
library(FSelectorRcpp)
library(randomForest)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
# chemin d'acces C:\Users\nahny\Documents\GitHub
#DT=read.csv("C:/Users/nahny/Documents/GitHub/creditcard.csv", stringsAsFactors = FALSE )
DT=readRDS("templatePDF/creditcard.rds")
#DT=read.csv("C:/Users/33668/Documents/MASTER 2 ESA/projet svm/app_0611/creditcard.csv", stringsAsFactors = FALSE )
set.seed(123234)
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
table_prop<-rbind(table(DT$Class),prop.table(table(DT$Class)))
row.names(table_prop)<-c("Number","Proportion (in %)")
table_prop[2,]<-round(table_prop[2,],4)*100
tableex=DT[1:100,c(1,2,3,4,5,6,30,31)]
stat=summary(DT[,-31])
tab1=prop.table(table(DT$Class))
tab=table(DT$Class)
mat=rbind(tab,tab1)
row.names(mat)<-c("Number","Proportion (in %)")
mat[2,]<-round(mat[2,],4)*100
# data splitting
intrain=createDataPartition(DT$Class, p = 0.7,list=FALSE)
DT.train=as.data.frame(DT[intrain,])
data.test=as.data.frame(DT[-intrain,])
})
htmlwidgets::saveWidget(p, "profile.html")
browseURL("profile.html")
shinyServer(function(input, output) {
##
output$tableDT2<-renderDT({
DT::datatable(table_prop,list(dom = 't'))
})
output$tableDTt<-renderDT({
DT::datatable(tableex)
})
output$tableDTs<-renderDT({
DT::datatable(stat)
})
# table DT
output$tabletrain1 <- renderDT({ DT::datatable(mat,list(dom = 't')) })
# creation of smote data train
data.train <- reactive({
data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = input$kn,
dup_size = input$prop)$data
names(data.train)[31]="Class"
set.seed(12345)
s=sample(1:nrow(data.train),input$size)
data.train=data.train[s,]
return(data.train)
})
output$smote <- renderDT({
ab=table(data.train()$Class)
ab1= prop.table(table(data.train()$Class))
at=rbind(ab,ab1)
row.names(at)<-c("Number","Proportion (in %)")
at[2,]<-round(at[2,],4)*100
DT::datatable(at,list(dom = 't'))
})
})
# install.packages("profvis")
# Calcul des ressources utilisÃ©es
library(profvis)
p <- profvis({
library(shiny)
library(mlr)
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)
library(smotefamily)
library(FSelectorRcpp)
library(randomForest)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
# chemin d'acces C:\Users\nahny\Documents\GitHub
#DT=read.csv("C:/Users/nahny/Documents/GitHub/creditcard.csv", stringsAsFactors = FALSE )
DT=readRDS("templatePDF/creditcard.rds")
#DT=read.csv("C:/Users/33668/Documents/MASTER 2 ESA/projet svm/app_0611/creditcard.csv", stringsAsFactors = FALSE )
set.seed(123234)
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
table_prop<-rbind(table(DT$Class),prop.table(table(DT$Class)))
row.names(table_prop)<-c("Number","Proportion (in %)")
table_prop[2,]<-round(table_prop[2,],4)*100
tableex=DT[1:100,c(1,2,3,4,5,6,30,31)]
stat=summary(DT[,-31])
tab1=prop.table(table(DT$Class))
tab=table(DT$Class)
mat=rbind(tab,tab1)
row.names(mat)<-c("Number","Proportion (in %)")
mat[2,]<-round(mat[2,],4)*100
# data splitting
intrain=createDataPartition(DT$Class, p = 0.7,list=FALSE)
DT.train=as.data.frame(DT[intrain,])
data.test=as.data.frame(DT[-intrain,])
shinyServer(function(input, output) {
##
output$tableDT2<-renderDT({
DT::datatable(table_prop,list(dom = 't'))
})
output$tableDTt<-renderDT({
DT::datatable(tableex)
})
output$tableDTs<-renderDT({
DT::datatable(stat)
})
# table DT
output$tabletrain1 <- renderDT({ DT::datatable(mat,list(dom = 't')) })
# creation of smote data train
data.train <- reactive({
data.train=smotefamily::SMOTE(DT.train[,-31], DT.train[,31], K = input$kn,
dup_size = input$prop)$data
names(data.train)[31]="Class"
set.seed(12345)
s=sample(1:nrow(data.train),input$size)
data.train=data.train[s,]
return(data.train)
})
output$smote <- renderDT({
ab=table(data.train()$Class)
ab1= prop.table(table(data.train()$Class))
at=rbind(ab,ab1)
row.names(at)<-c("Number","Proportion (in %)")
at[2,]<-round(at[2,],4)*100
DT::datatable(at,list(dom = 't'))
})
})
})
htmlwidgets::saveWidget(p, "profile.html")
browseURL("profile.html")
library(shiny)
