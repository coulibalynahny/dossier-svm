shiny::runApp('GitHub/dossier-svm')
help(sqrt)
gfy=6+8
gfy
runApp('GitHub/dossier-svm')
runApp('GitHub/dossier-svm')
runApp('GitHub/dossier-svm')
runApp('GitHub/dossier-svm')
runApp('GitHub/dossier-svm')
shiny::runApp('GitHub/dossier-svm')
install.packages("rsconnect")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
TClass <- factor(c("non fraud", "non fraud", "fraud", "fraud"))
TClass
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
table_prop<-rbind(table(DT$Class),prop.table(table(DT$Class)))
row.names(table_prop)<-c("Number","Proportion (in %)")
table_prop[2,]<-round(table_prop[2,],4)*100
tableex=DT[1:100,c(1,2,3,4,5,6,30,31)]
stat=summary(DT[,-31])
DT=read.csv("C:/Users/nahny/Documents/GitHub/dossier-svm/creditcard.csv", stringsAsFactors = FALSE )
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
table_prop<-rbind(table(DT$Class),prop.table(table(DT$Class)))
row.names(table_prop)<-c("Number","Proportion (in %)")
table_prop[2,]<-round(table_prop[2,],4)*100
tableex=DT[1:100,c(1,2,3,4,5,6,30,31)]
stat=summary(DT[,-31])
set.seed(1234)
inTrain = createDataPartition(DT$Class, p = 0.7,list=FALSE)
data.train = as.data.frame(DT[inTrain,])
data.test = as.data.frame(DT[-inTrain,])
tab=table(data.train$Class)
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
set.seed(1234)
inTrain = createDataPartition(DT$Class, p = 0.7,list=FALSE)
data.train = as.data.frame(DT[inTrain,])
data.test = as.data.frame(DT[-inTrain,])
tab=table(data.train$Class)
shiny::runApp()
runApp()
DT=read.csv("C:/Users/nahny/Documents/GitHub/dossier-svm/creditcard.csv", stringsAsFactors = FALSE )
# =======
DT$Amount=as.vector(scale(DT$Amount))
DT$Time=as.vector(scale(DT$Time))
DT$Class=as.factor(DT$Class)
levels(DT$Class)[1] <- "nonFraud"
levels(DT$Class)[2] <- "Fraud"
set.seed(1234)
inTrain = createDataPartition(DT$Class, p = 0.7,list=FALSE)
data.train = as.data.frame(DT[inTrain,])
data.test = as.data.frame(DT[-inTrain,])
tab=table(data.train$Class)
tab1=prop.table(table(data.train$Class))
tab=table(data.train$Class)
mat=rbind(tab1,tab)
tad=data.frame(mat)
tad
TClass <- factor(c("non fraud", "non fraud", "fraud", "fraud"))
PClass <- factor(c("non fraud", "fraud", "non fraud", "fraud"))
TClass
df <- data.frame(TClass, PClass, mat)
mat=cbind(tab1,tab)
mat
df <- data.frame(TClass, PClass, mat)
mat=c(tab1,tab)
df <- data.frame(TClass, PClass, mat)
df
tab1
tab
runApp()
runApp()
runApp()
as.data.frame(df)
is.data.frame(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotly
runApp()
plot_ly(des)
runApp()
runApp()
runApp()
runApp()
?plot_ly
runApp()
plot_ly(DT,type=BOX)
plot_ly(DT,type="box")
plot_ly(DT,aes=(x=DT$Amount,y=DT$Class),type="box")
plot_ly(DT,x= ~ DT$Amount)
plot_ly(DT,x= ~ DT$Amount,type="box")
runApp()
runApp()
runApp()
runApp()
runApp()
learner.lg <- makeLearner(cl="classif.logreg",predict.type="prob")
train.lg <- mlr::train(learner.lg,train.task())
predict(train.lg(),test.task())
calculateConfusionMatrix(pred.lg(),relative = TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("smotefamily")
shiny::runApp()
library(plotly)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shiny)
library(mlr)
library(rpart)
library(rpart.plot)
library(e1071)
library(caret)
library(smotefamily)
library(FSelectorRcpp)
library(randomForest)
library(data.table)
library(DT)
library(ggplot2)
library(plotly)
runApp()
train.task <-makeClassifTask(data=data.test,target="Class",positive = "Fraud")
runApp()
runApp('C:/Users/nahny/OneDrive/Bureau/master ESA/master 2 ESA/SVM/doc')
runApp('~/GitHub/dossier-svm')
runApp()
runApp()
runApp()
runApp()
runApp()
